{"ast":null,"code":"import { LoginInitialState, linkVerificationInitialState, ForgotPasswordInitialState, ResetPasswordInitialState } from '../actions/homePageAction';\nimport { handleActions } from 'redux-actions';\n//import {  ILinkVerificationModal }from '../actions/homePageAction';\nimport { AuthActionTypes } from '../actions/homePageAction';\nconst initialState = {\n  isLoggedIn: false // or true, depending on the default\n  // other properties...\n};\nexport const logReducer = handleActions({\n  [AuthActionTypes.LOGIN_REQUEST]: (state = LoginInitialState, action) => ({\n    ...state,\n    isLoading: true,\n    isLoggedIn: false,\n    userData: {}\n  }),\n  [AuthActionTypes.LOGIN_SUCCESS]: (state = LoginInitialState, action) => ({\n    ...state,\n    isLoading: false,\n    isLoggedIn: true,\n    userData: action.payload.userData\n  }),\n  [AuthActionTypes.LOGIN_FAILURE]: (state = LoginInitialState, action) => ({\n    ...state,\n    isLoading: false,\n    isLoggedIn: false,\n    error: action.payload.error,\n    attempts: action.payload.attempts,\n    userData: {}\n  })\n}, LoginInitialState);\nexport const forgotPasswordReducer = handleActions({\n  [AuthActionTypes.FORGOT_PASSWORD_REQUEST]: (state = ForgotPasswordInitialState, action) => ({\n    ...state,\n    isLoading: true\n  }),\n  [AuthActionTypes.FORGOT_PASSWORD_SUCCESS]: (state = ForgotPasswordInitialState, action) => ({\n    ...state,\n    isLoading: false,\n    isError: false\n  }),\n  [AuthActionTypes.FORGOT_PASSWORD_FAILURE]: (state = ForgotPasswordInitialState, action) => ({\n    ...state,\n    isLoading: false,\n    isError: true\n  })\n}, ForgotPasswordInitialState);\nexport const linkVerificationReducer = handleActions({\n  [AuthActionTypes.LINK_VERIFICATION_REQUEST]: (state = linkVerificationInitialState, action) => ({\n    ...state,\n    isLoading: true\n  }),\n  [AuthActionTypes.LINK_VERIFICATION_SUCCESS]: (state = linkVerificationInitialState, action) => ({\n    ...state,\n    isLoading: true,\n    verificationData: action.payload.verificationData,\n    isVerified: true\n  }),\n  [AuthActionTypes.LINK_VERIFICATION_FAILURE]: (state = linkVerificationInitialState, action) => ({\n    ...state,\n    isLoading: true,\n    isVerified: false\n  })\n}, linkVerificationInitialState);\nexport const resetPasswordReducer = handleActions({\n  [AuthActionTypes.RESET_PASSWORD_REQUEST]: (state = ResetPasswordInitialState, action) => ({\n    ...state,\n    isLoading: true\n  }),\n  [AuthActionTypes.RESET_PASSWORD_SUCCESS]: (state = ResetPasswordInitialState, action) => ({\n    ...state,\n    isLoading: false,\n    isError: false\n  }),\n  [AuthActionTypes.RESET_PASSWORD_FAILURE]: (state = ResetPasswordInitialState, action) => ({\n    ...state,\n    isLoading: false,\n    isError: true\n  })\n}, ResetPasswordInitialState);","map":{"version":3,"names":["LoginInitialState","linkVerificationInitialState","ForgotPasswordInitialState","ResetPasswordInitialState","handleActions","AuthActionTypes","initialState","isLoggedIn","logReducer","LOGIN_REQUEST","state","action","isLoading","userData","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","attempts","forgotPasswordReducer","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","isError","FORGOT_PASSWORD_FAILURE","linkVerificationReducer","LINK_VERIFICATION_REQUEST","LINK_VERIFICATION_SUCCESS","verificationData","isVerified","LINK_VERIFICATION_FAILURE","resetPasswordReducer","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAILURE"],"sources":["C:/xampp2/htdocs/dashboard/prasad/frontend-react/src/reducer/logReducer.ts"],"sourcesContent":["import {\r\n    LoginInitialState,\r\n    linkVerificationInitialState,\r\n    ForgotPasswordInitialState,\r\n    ResetPasswordInitialState,\r\n  } from '../actions/homePageAction';\r\n  import { handleActions } from 'redux-actions';\r\n  //import {  ILinkVerificationModal }from '../actions/homePageAction';\r\n  import { AuthActionTypes } from '../actions/homePageAction';\r\n  interface ILoginModal {\r\n    isLoading: boolean;\r\n    isLoggedIn: boolean;\r\n    userData?: object;\r\n    error?: object;\r\n    attempts: string;\r\n  }\r\n  interface ILinkVerificationModal {\r\n    isLoading: boolean;\r\n    isVerified: boolean;\r\n    verificationData: {\r\n      verifyToken: string;\r\n      email: string;\r\n      id: string;\r\n    };\r\n  }\r\n\r\n  const initialState = {\r\n    isLoggedIn: false, // or true, depending on the default\r\n    // other properties...\r\n  };\r\n  export const logReducer = handleActions<ILoginModal, any>(\r\n    {\r\n      [AuthActionTypes.LOGIN_REQUEST]: (\r\n        state = LoginInitialState,\r\n        action,\r\n      ): ILoginModal => ({\r\n        ...state,\r\n        isLoading: true,\r\n        isLoggedIn: false,\r\n        userData: {}, \r\n      }),\r\n      [AuthActionTypes.LOGIN_SUCCESS]: (\r\n        state = LoginInitialState,\r\n        action,\r\n      ): ILoginModal => ({\r\n        ...state,\r\n        isLoading: false,\r\n        isLoggedIn: true,\r\n        userData: action.payload.userData,\r\n      }),\r\n      [AuthActionTypes.LOGIN_FAILURE]: (\r\n        state = LoginInitialState,\r\n        action,\r\n      ): ILoginModal => ({\r\n        ...state,\r\n        isLoading: false,\r\n        isLoggedIn: false,\r\n        error: action.payload.error,\r\n        attempts: action.payload.attempts,\r\n        userData: {},      \r\n      }),\r\n    },\r\n    LoginInitialState,\r\n  );\r\n  \r\n  export const forgotPasswordReducer = handleActions<any, any>(\r\n    {\r\n      [AuthActionTypes.FORGOT_PASSWORD_REQUEST]: (\r\n        state = ForgotPasswordInitialState,\r\n        action,\r\n      ): any => ({\r\n        ...state,\r\n        isLoading: true,\r\n      }),\r\n      [AuthActionTypes.FORGOT_PASSWORD_SUCCESS]: (\r\n        state = ForgotPasswordInitialState,\r\n        action,\r\n      ): any => ({\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n      }),\r\n      [AuthActionTypes.FORGOT_PASSWORD_FAILURE]: (\r\n        state = ForgotPasswordInitialState,\r\n        action,\r\n      ): any => ({\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      }),\r\n    },\r\n    ForgotPasswordInitialState,\r\n  );\r\n  \r\n  export const linkVerificationReducer = handleActions<any, any>(\r\n    {\r\n      [AuthActionTypes.LINK_VERIFICATION_REQUEST]: (\r\n        state = linkVerificationInitialState,\r\n        action,\r\n      ): ILinkVerificationModal => ({\r\n        ...state,\r\n        isLoading: true,\r\n      }),\r\n      [AuthActionTypes.LINK_VERIFICATION_SUCCESS]: (\r\n        state = linkVerificationInitialState,\r\n        action,\r\n      ): ILinkVerificationModal => ({\r\n        ...state,\r\n        isLoading: true,\r\n        verificationData: action.payload.verificationData,\r\n        isVerified: true,\r\n      }),\r\n      [AuthActionTypes.LINK_VERIFICATION_FAILURE]: (\r\n        state = linkVerificationInitialState,\r\n        action,\r\n      ): ILinkVerificationModal => ({\r\n        ...state,\r\n        isLoading: true,\r\n        isVerified: false,\r\n      }),\r\n    },\r\n    linkVerificationInitialState,\r\n  );\r\n  \r\n  export const resetPasswordReducer = handleActions<any, any>(\r\n    {\r\n      [AuthActionTypes.RESET_PASSWORD_REQUEST]: (\r\n        state = ResetPasswordInitialState,\r\n        action,\r\n      ): ILinkVerificationModal => ({\r\n        ...state,\r\n        isLoading: true,\r\n      }),\r\n      [AuthActionTypes.RESET_PASSWORD_SUCCESS]: (\r\n        state = ResetPasswordInitialState,\r\n        action,\r\n      ): ILinkVerificationModal => ({\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n      }),\r\n      [AuthActionTypes.RESET_PASSWORD_FAILURE]: (\r\n        state = ResetPasswordInitialState,\r\n        action,\r\n      ): ILinkVerificationModal => ({\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      }),\r\n    },\r\n    ResetPasswordInitialState,\r\n  );\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}